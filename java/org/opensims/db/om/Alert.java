/**
 * @LICENSE@
 */

package org.opensims.db.om;

/**
 * The skeleton for this class was autogenerated by Torque on:
 *
 * [Tue Aug 10 03:31:11 EDT 2004]
 *
 * <P>
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 * </P>
 *
 * $CVSId: Alert.java,v 1.20 2007/05/29 01:48:11 brett Exp $
 * $Id: Alert.java 1 2008-01-10 18:37:05Z smoot $
 * @version $Revision: 1.20 $
 * @author Paco NATHAN <paco@symbiot.com>
 * @author Mike W. ERWIN <mikee@symbiot.com>
 * @see <A href="/docs/torque/opensims-schema.html#alert">Torque-generated SQL Database Schema</A>
 */

public class
    Alert
    extends org.opensims.db.om.BaseAlert
    implements org.apache.torque.om.Persistent,
	       org.opensims.alert.Alert
{
    // protected fields

	protected final static java.text.DecimalFormat metric_format_0 = new java.text.DecimalFormat("000");
	protected final static java.text.DecimalFormat metric_format_1 = new java.text.DecimalFormat("####0.0");
    protected final static java.text.DecimalFormat metric_format_2 = new java.text.DecimalFormat("####0.00");
    protected final static java.text.DecimalFormat metric_format_4 = new java.text.DecimalFormat("###0.0000");
    
    protected org.opensims.Manager manager = null;
    
    // private fields
    private long first_tick = 0;

    // quality assurance
    private final static org.apache.log4j.Logger log_ = org.apache.log4j.Logger.getLogger(org.opensims.db.om.Alert.class.getName());


	/**
	 * Constructor to get us a blank Alert object.
	 */
	
	public Alert() {
	}

    /**
     * Represent as a String
     */

    public String
	getSummary ()
	{
		StringBuffer buf = new StringBuffer();
	
		try {
			buf.append(getKey());
			buf.append("\t");
			buf.append(getAlertDef().getDescription());
			buf.append("\n\t route: ");
			buf.append(getKey());
			buf.append("\n\t tick: ");
			buf.append(manager.getCorrelator().getTick() - getTick());
		}
		catch (Exception e) {
			log_.error("get summary", e);
		}
	
		return buf.toString();
	}

    //////////////////////////////////////////////////////////////////////
    // Comparable methods
    //////////////////////////////////////////////////////////////////////

    /**
     * Compares this object with the specified object for order
     */

    public int
	compareTo (Object o)
	{
		int result = 0;
	
		org.opensims.db.om.Alert other = (org.opensims.db.om.Alert) o;
	
		if (this.getTick() > other.getTick()) {
			result = -1;
		}
		else if (this.getTick() < other.getTick()) {
			result = 1;
		}
	
		return result;
	}

    //////////////////////////////////////////////////////////////////////
    // Incident methods
    //////////////////////////////////////////////////////////////////////

	/**
	 * returns earliest incident's tick
	 */
	public long
	firstTick()
	{
		if ( this.first_tick == 0 ) {
			return getTick();
		}
		return first_tick;
	}

	/**
	 * record an additional incident of this alert
	 */
	public void
	registerIncident( long new_tick )
	{
		setIncidentCount( getIncidentCount() + 1 );
		if ( this.first_tick == 0 ) {
			this.first_tick = getTick();
		}
		setTick( new_tick );
	}

    //////////////////////////////////////////////////////////////////////
    // Tickable methods
    //////////////////////////////////////////////////////////////////////

    /**
     * Get the Manager
     */

    public org.opensims.Manager
    getManager ()
    {
		return manager;
    }


    /**
     * Set the Manager
     */

    public void
    setManager (org.opensims.Manager manager)
    {
		this.manager = manager;
    }


    /**
     * Get the tick value - for expiry
     */

    public long
	getLastTick ()
    {
		return getTick();
    }


    /**
     * Set the tick value - for expiry
     */

    public void
	setLastTick (long last_tick)
    {
		setTick(last_tick);
    }


    /**
     * Get the hashtable lookup key
     */

    public static String
	getKey (String unique_id, org.opensims.model.HostOrBogey src_host, String src_port, org.opensims.model.HostOrBogey dst_host, String dst_port, String protocol)
	{
		String key = null;
	
		try {
			key = unique_id + ":" + src_host.getIPv4().toString() + ":" + src_port + ":" + dst_host.getIPv4().toString() + ":" + dst_port + ":" + protocol;
		}
		catch (Exception e) {
			log_.error("get key", e);
		}
	
		return key;
	}


    /**
     * Get the hashtable lookup key
     */

    public String
	getKey ()
	{
		String key = null;
	
		try {
			key = getAlertDef().getUniqueId() + ":" + getSrcHost().getIpAddr() + ":" + getSrcPort() + ":" + getDstHost().getIpAddr() + ":" + getDstPort() + ":" + getProtocol();
		}
		catch (Exception e) {
			try {
				log_.error("get key: alert_def |" + getAlertDef() + "| src_host |" + getSrcHost() + "| src_port |" + getSrcPort() + "| dst_host |" + getDstHost() + "| dst_port |" + getDstPort() + "| protocol |" + getProtocol() + "|", e);
			}
			catch (Exception e2) {
				// ignore
			}
		}
	
		return key;
	}


    /**
     * Check the expiry date/time
     */

    public boolean
	checkExpiry (long model_tick)
	{
		boolean result = false;
		long period = model_tick - getTick();
	
		if (period > org.opensims.Tickable.EXPIRY_PERIOD) {
			if (log_.isDebugEnabled()) {
				log_.debug("delist alert " + getKey() + " period " + period);
			}
	
			getManager().remove(getKey());
			result = true;
		}
	
		return result;
	}


    //////////////////////////////////////////////////////////////////////
    // misc. access methods
    //////////////////////////////////////////////////////////////////////

    /**
     * Get the database ID
     */

    public String
	getAlertId ()
    {
		return String.valueOf(getId());
    }


    /**
     * Get the source host
     */

    public org.opensims.model.HostOrBogey
	getSrcHost ()
	{
		org.opensims.model.HostOrBogey host = null;
	
		try {
			host = getHostRelatedBySrcHostId();
		}
		catch (Exception e) {
			log_.error("get src host", e);
		}
	
		return host;
	}


    /**
     * Get the destination host
     */

    public org.opensims.model.HostOrBogey
	getDstHost ()
	{
		org.opensims.model.HostOrBogey host = null;
	
		try {
			host = getHostRelatedByDstHostId();
		}
		catch (Exception e) {
			log_.error("get dst host", e);
		}
	
		return host;
	}


    //////////////////////////////////////////////////////////////////////
    // Reportable methods
    //////////////////////////////////////////////////////////////////////

    /**
     * Format an XML node for rendering a report
     */

    public org.jdom.Element
	getReportNode ()
    {
        org.jdom.Element report_node = new org.jdom.Element(org.opensims.xml.Node.ALT_NODE);

		try {
			report_node.setAttribute("tick", String.valueOf(getTick()));
			report_node.setAttribute("timestamp", getManager().getCorrelator().formatTick(getTick()));
			report_node.setAttribute("id", getAlertId());
			report_node.setAttribute("text", getAlertDef().getDescription());
			report_node.setAttribute("source", getSource());
	
			report_node.addContent(getAlertDef().getReportNode());
	
			org.jdom.Element src_node = new org.jdom.Element(org.opensims.xml.Node.SRC_NODE);
	
			report_node.addContent(src_node);
			src_node.addContent(getSrcHost().getReportNode());
	
			org.jdom.Element dst_node = new org.jdom.Element(org.opensims.xml.Node.DST_NODE);
	
			report_node.addContent(dst_node);
			dst_node.addContent(getDstHost().getReportNode());
	
			report_node.setAttribute("src_port", getSrcPort());
			report_node.setAttribute("dst_port", getDstPort());
			report_node.setAttribute("protocol", getProtocol());
		}
		catch (Exception e) {
			log_.error("get report node", e);
		}

		return report_node;
    }


    //////////////////////////////////////////////////////////////////////
    // Exportable methods
    //////////////////////////////////////////////////////////////////////

    /**
     * Format an XML node for export
     */

    public org.jdom.Element
	getExportNode ()
    {
        org.jdom.Element export_node = new org.jdom.Element(org.opensims.xml.Node.ALT_NODE);

		try {
			export_node.setAttribute("tick", String.valueOf(getTick()));
			export_node.setAttribute("id", getAlertId());
	
			export_node.setAttribute("source", getSource());
			export_node.setAttribute("count", String.valueOf(getIncidentCount()));
			export_node.setAttribute("ids", getAlertDef().getAlertType().getTypeId());
			export_node.setAttribute("text", getAlertDef().getDescription());
	
			export_node.setAttribute("src", getSrcHost().getHostId());
			export_node.setAttribute("srcAddr", getSrcHost().getIpAddr());
			export_node.setAttribute("srcPort", getSrcPort());
			export_node.setAttribute("srcRole", getSrcHost().getRole());
	
			export_node.setAttribute("dst", getDstHost().getHostId());
			export_node.setAttribute("dstAddr", getDstHost().getIpAddr());
			export_node.setAttribute("dstPort", getDstPort());
			export_node.setAttribute("dstRole", getDstHost().getRole());
	
			export_node.setAttribute("protocol", getProtocol());
	
			export_node.setAttribute("ce", formatRisk2(getCe()));
			export_node.setAttribute("te", formatRisk4(getTe()));
			export_node.setAttribute("ve", formatRisk4(getVe()));
			export_node.setAttribute("rm", formatRisk4(scaleRiskMeasure(getRm())));
			export_node.setAttribute("ci", formatRisk4(getCi()));
	
			export_node.setAttribute("risk", formatRisk2(getRm()));
		}
		catch (Exception e) {
			log_.error("get export node", e);
		}
	
		return export_node;
    }


    /**
     * Apply a logarithmic scaling to the risk measure, so that we
     * can render log-linear charts.
     */
    public static double
	scaleRiskMeasure (double rm)
    {
		return Math.pow(Math.log(Math.max(rm, 1.0)), 0.5);
    }


    /**
     * Format a risk metric, 0 decimal places.
     */
    public static String
	formatRisk0 (double metric)
    {
		return metric_format_0.format(metric);
    }

    /**
     * Format a risk metric, 1 decimal place.
     */
    public static String
	formatRisk1 (double metric)
    {
		return metric_format_1.format(metric);
    }

    /**
     * Format a risk metric, 2 decimal places.
     */
    public static String
	formatRisk2 (double metric)
    {
		return metric_format_2.format(metric);
    }


    /**
     * Format a risk metric, 4 decimal places.
     */
    public static String
	formatRisk4 (double metric)
    {
		return metric_format_4.format(metric);
    }


    /**
     * Format an XML node for export - for the <CON/> elements
     */
    public org.jdom.Element
	getConnectionExportNode ()
    {
        org.jdom.Element export_node = new org.jdom.Element(org.opensims.xml.Node.CON_NODE);

		try {
			export_node.setAttribute("tick", String.valueOf(getTick()));
	
			/**
			 * @TODO needs to be worked into the threat model, compared with network traffic data
			 */
	
			export_node.setAttribute("src", getSrcHost().getHostId());
			export_node.setAttribute("srcAddr", getSrcHost().getIpAddr());
			export_node.setAttribute("srcPort", getSrcPort());
	
			export_node.setAttribute("dst", getDstHost().getHostId());
			export_node.setAttribute("dstAddr", getDstHost().getIpAddr());
			export_node.setAttribute("dstPort", getDstPort());
	
			export_node.setAttribute("proto", getProtocol());
	
			// public final static int STATE_BEGIN = 0;
			export_node.setAttribute("state", "0"); // String.valueOf(getState())
	
			// public final static int LEVEL_NEEDS_DETAIL = 5;
			export_node.setAttribute("level", "5"); // String.valueOf(getLevel())
	
			export_node.setAttribute("ids", getAlertDef().getAlertType().getTypeId());
			export_node.setAttribute("alert", getAlertId());
		}
		catch (Exception e) {
			log_.error("get connection export node", e);
		}
	
		return export_node;
    }
}
