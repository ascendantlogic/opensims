/**
 * @LICENSE@
 */

package org.opensims.db.om;

/**
 * The skeleton for this class was autogenerated by Torque on:
 *
 * [Mon Aug 09 15:43:22 EDT 2004]
 *
 * <P>
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 * </P>
 *
 * $CVSId: AlertType.java,v 1.7 2004/09/01 20:54:51 paco Exp $
 * $Id: AlertType.java 1 2008-01-10 18:37:05Z smoot $
 * @version $Revision: 1.7 $
 * @author Paco NATHAN <paco@symbiot.com>
 * @see <A href="/docs/torque/opensims-schema.html#alert_type">Torque-generated SQL Database Schema</A>
 */

public class
    AlertType
    extends org.opensims.db.om.BaseAlertType
    implements org.apache.torque.om.Persistent,
	       org.opensims.alert.AlertType
{
    // protected fields

    protected org.jdom.Element node = null;
    protected long count = 0L;
    protected double frequency = 0.0;
    protected int report_index = 0;

    // quality assurance

    private final static org.apache.log4j.Logger log_ = org.apache.log4j.Logger.getLogger(org.opensims.db.om.AlertType.class.getName());


    //////////////////////////////////////////////////////////////////////
    // misc. access methods
    //////////////////////////////////////////////////////////////////////

    /**
     * Get the XML node.
     */

    public org.jdom.Element
	getNode ()
    {
	return node;
    }


    /**
     * Set the XML node.
     */

    public void
	setNode (org.jdom.Element node)
    {
	this.node = node;
    }


    /**
     * Get the alert type id.
     */

    public String
	getTypeId ()
    {
	return Integer.toString(getId());
    }


    //////////////////////////////////////////////////////////////////////
    // reporting support
    //////////////////////////////////////////////////////////////////////

    /**
     * Get the count for the current report.
     */

    public long
	getCount ()
    {
	return count;
    }


    /**
     * Set the count for the current report.
     */

    public void
	setCount (long count)
    {
	this.count = count;
    }


    /**
     * Increment the count for the current report.
     */

    public void
	incrementCount (long count)
    {
	this.count += count;
    }


    /**
     * Get the relative frequency for the current report.
     */

    public double
	getFrequency ()
    {
	return frequency;
    }


    /**
     * Set the relative frequency for the current report.
     */

    public void
	setFrequency (long sum_count)
    {
	if (sum_count > 0) {
	    frequency = Math.round((double) 10000.0 * (double) getCount() / (double) sum_count) / (double) 100.0;
	    node.setAttribute("freq", String.valueOf(frequency));
	}
	else {
	    node.setAttribute("freq", "0.0");
	}

	node.setAttribute("count", String.valueOf(getCount()));

	if (log_.isDebugEnabled()) {
	    log_.debug("aler_type freq: " + getCount() + " @ " + frequency + " " + getName());
	}
    }


    /**
     * Get the report data point index.
     */

    public int
	getReportIndex ()
    {
	return report_index;
    }


    /**
     * Set the report data point index.
     */

    public void
	setReportIndex (int report_index)
    {
	this.report_index = report_index;
    }
}
