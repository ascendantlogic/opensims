######################################################################
# Torque Configuration
#
# This file contains the most commonly used properties. For a
# a complete list of build properties, please refer to:
#   http://jakarta.apache.org/turbine/torque/properties-reference.xml
######################################################################


######################################################################
# Compiler Settings
######################################################################

build.dest = ${basedir}/../../java

torque.doc.dir = ${basedir}/../../docs/torque
torque.sql.dir = ${basedir}/src
torque.java.dir = ${build.dest}
torque.compile.src.dir = ${build.dest}
torque.compile.build.dir = ${build.dest}


######################################################################
# Object Model Information
# 
# These settings will allow you to customize the way your
# Peer-based object model is created.
# -------------------------------------------------------------------
# addGetByNameMethod
#   If true, Torque adds methods to get database fields by name/position.
#
# addIntakeRetrievable
#   If true, the data objects will implement Intake's Retrievable 
#   interface
#
# addSaveMethod
#   If true, Torque adds tracking code to determine how to save objects.
#
# addTimeStamp
#   If true, Torque true puts time stamps in generated om files.
#
# basePrefix
#   A string to pre-pend to the file names of base data and peer objects.
#
# complexObjectModel
#   If true, Torque generates data objects with collection support and 
#   methods to easily retreive foreign key relationships.
#
# sameJavaName
#   If true, the JDBC task will set the javaName attribute for the tables 
#   and columns to be the same as SQL name.
#
# targetPackage
#   Sets the Java package the om files will generated to, e.g. 
#   "com.company.project.om".
#
# useClasspath
#   If true, Torque will not look in the <code>templatePath</code> directory,
#   for templates, but instead load them from the classpath, allowing you to 
#   use Torque without extracted it from the jar.
#
# useManagers
#   If true, Torque will generate Manager classes that use JCS for caching.
#   Still considered experimental.
######################################################################

torque.project = ${tdk.project}
torque.targetPackage = org.opensims.db.om

torque.addGetByNameMethod = true
torque.addIntakeRetrievable = false
torque.addSaveMethod = true
torque.addTimeStamp = true
torque.basePrefix = Base
torque.complexObjectModel = true
torque.sameJavaName = false
torque.useClasspath = false
torque.useManagers = false


######################################################################
#
# Database Settings
#
# Includes the JDBC connection settings. This is used by the JDBCToXML
# task that will create an XML database schema from JDBC
# metadata. These settings are also used by the SQL Ant task to
# initialize your Torque system with the generated SQL.
#
# Your possible target database platform choices are:
#   axion, cloudscape, db2, db2400, hypersonic, interbase, mssql,
#   mysql, oracle, postgresql, sapdb, sybase
######################################################################

torque.database = ${db.platform}
torque.database.driver = ${db.jdbc.driver}
torque.database.jarFile = ${db.jdbc.jar}

torque.database.user = ${db.user}
torque.database.password = ${db.password}

torque.database.schema = ${databaseSchema}
torque.database.name = ${databaseName}

torque.database.createUrl = ${createDatabaseUrl}
torque.database.buildUrl = ${buildDatabaseUrl}
torque.database.url = ${databaseUrl}
